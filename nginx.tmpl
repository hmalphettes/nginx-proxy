map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {

{{ range $index, $container := $containers }}

	{{ $addrLen := len $container.Addresses }}
  {{/* If no port exposed then assume --net=host */}}
  {{ if eq $addrLen 0 }}
		   # {{$container.Name}}
		   server 127.0.0.1:{{ $container.Env.VIRTUAL_PORT }};
	{{/* If only 1 port exposed, use that */}}
	{{ else if eq $addrLen 1 }}
		{{ $address := index $container.Addresses 0 }}
		# {{$container.Name}}
		server {{ $address.IP }}:{{ $address.Port }};

	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $container.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $container.Addresses }}
		   {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
		   # {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}

	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $container.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

server {
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	server_name {{ $host }};
	proxy_buffering off;
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	client_body_temp_path /tmp;
	location / {
		proxy_pass http://{{ $host }};
		include /etc/nginx/proxy_params;

		# HTTP 1.1 and WS support
		proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
	}
}
{{ end }}
